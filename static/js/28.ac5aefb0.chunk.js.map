{"version":3,"file":"static/js/28.ac5aefb0.chunk.js","mappings":"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","sources":["components/PageHeader.jsx","components/elements/BasicButton.jsx","components/elements/CardHeader.jsx","components/elements/DangerButton.jsx","components/elements/PrimaryButton.jsx","components/elements/CardWithFooter.jsx","components/elements/CardSubHeader.jsx","pages/MyInfoEdit.js"],"sourcesContent":["import React from \"react\";\nimport {ChevronLeftIcon, ChevronRightIcon, HomeIcon} from \"@heroicons/react/solid\";\nimport {Link} from \"react-router-dom\";\nimport classNames from \"classnames\";\n\n/** Заголовок содержимого страницы, \"хлебные крошки\"\n * @param pages - объект для навигации:\n * {name: пункт навигации, href: ссылка на элемент, current: флаг текущей страницы (bool)}\n * @param classname - доп. класс/ы\n * @param header - заголовок\n * @param children - содержимое правой части заголовка (кнопки и т.д.)\n * @returns {JSX.Element}\n * @constructor\n */\nconst PageHeader = ({pages, classname, header, children}) => {\n\n    return (\n        <div className={classname}>\n            <nav className=\"sm:hidden\" aria-label=\"Назад\">\n                <Link\n                    to={-1}\n                    className=\"flex items-center text-sm font-medium text-gray-500 hover:text-gray-700\"\n                >\n                    <ChevronLeftIcon className=\"flex-shrink-0 -ml-1 mr-1 h-5 w-5 text-gray-400\"/>\n                    Назад\n                </Link>\n            </nav>\n            <nav className={classNames(\"w-full hidden sm:flex\")} aria-label=\"Навигация\">\n                <ol className=\"flex items-center space-x-4\">\n                    <li>\n                        <div>\n                            <Link\n                                to=\"/home\"\n                                className=\"text-gray-400 hover:text-gray-500\"\n                                title=\"Главная\"\n                            >\n                                <HomeIcon className=\"flex-shrink-0 h-5 w-5\" aria-hidden=\"true\"/>\n                                <span className=\"sr-only\" title=\"Главная\">Главная</span>\n                            </Link>\n                        </div>\n                    </li>\n                    {pages.map((page) => (\n                        <li key={page.name}>\n                            <div className=\"flex items-center\">\n                                <ChevronRightIcon className=\"flex-shrink-0 h-5 w-5 text-gray-400\" aria-hidden=\"true\"/>\n                                <Link\n                                    to={page.href}\n                                    className=\"ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\"\n                                    aria-current={\n                                        page.current\n                                            ? \"page\"\n                                            : undefined\n                                    }\n                                >\n                                    {page.name}\n                                </Link>\n                            </div>\n                        </li>\n                    ))}\n                </ol>\n            </nav>\n            {header || children\n                ? <div\n                    className={classNames(\"mt-2 md:flex md:items-center\", header ? \"md:justify-between\" : \"md:justify-end\")}>\n                    {header\n                        ? <div className=\"flex-1 min-w-0\">\n                            <h2 className=\"text-xl font-bold leading-7 text-gray-700 dark:text-gray-200 sm:text-2xl sm:truncate\">\n                                {header}\n                            </h2>\n                        </div>\n                        : \"\"}\n                    <div className=\"mt-4 justify-end flex-shrink-0 flex md:mt-0 md:ml-4\">\n                        {children}\n                    </div>\n                </div>\n                : \"\"}\n        </div>\n    )\n};\n\nexport default PageHeader;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/** Простая кнопка, адаптирована под темную тему\n * @param size - размер\n * @param label - лейбл кнопки\n * @param onClick - обработчик клика\n * @param type - тип\n * @param className\n * @param children\n * @param props - доп. пропсы\n * @returns {JSX.Element}\n * @constructor\n */\nconst BasicButton = ({size, label, onClick, type, className, children, ...props}) => {\n\n    const sizes = {\n        \"small\": \"px-3 py-1.5 text-xs\",\n        \"medium\": \"px-4 py-2 text-sm\",\n        \"large\": \"px-6 py-3 text-base\"\n    }\n\n    return (\n        <button\n            type={type}\n            onClick={onClick}\n            className={classNames(\"inline-flex items-center justify-center bg-white dark:bg-gray-900 border border-gray-300 rounded-md shadow-sm leading-4 font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:border-gray-600 dark:hover:bg-gray-700\", sizes[size], className)}\n            {...props}\n        >\n            {children}\n            {label}\n        </button>\n    )\n};\n\n/** Типы свойств */\nBasicButton.propTypes = {\n    /** Размер кнопки */\n    size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]).isRequired,\n    /** Лейбл (надпись) кнопки */\n    label: PropTypes.string.isRequired,\n    /** Доп. класс */\n    className: PropTypes.string,\n    /** Тип кнопки */\n    type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    /** Обработчик клика */\n    onClick: PropTypes.func,\n};\n\n/** Дефолтные свойства */\nBasicButton.defaultProps = {\n    size: \"medium\",\n    type: \"button\",\n    className: \"\",\n    label: \"button\",\n    onClick: undefined,\n};\n\nexport default BasicButton;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/** Заголовок карточки\n * @param title - заголовок\n * @param className - доп. класс/ы\n * @param props - доп. пропсы\n * @returns {JSX.Element}\n * @constructor\n */\nconst CardHeader = ({title, className, ...props}) => {\n    return (\n        <h3\n            className={classNames(\"text-base leading-6 font-medium text-gray-600 dark:text-gray-300\", className || \"\")}\n            {...props}\n        >\n            {title}\n        </h3>\n    );\n};\n\nCardHeader.propTypes = {\n    /** Заголовок */\n    title: PropTypes.string.isRequired,\n    /** Класс/ы */\n    className: PropTypes.string\n};\n\nCardHeader.defaultProps = {\n    /** Заголовок */\n    title: \"\",\n    /** Класс/ы */\n    className: PropTypes.string\n};\n\nexport default CardHeader;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/** Кнопка, предупреждающая о действии\n * @param size - размер\n * @param label - лейбл кнопки\n * @param onClick - обработчик клика\n * @param type - тип\n * @param className\n * @param props - доп. пропсы\n * @returns {JSX.Element}\n * @constructor\n */\nconst DangerButton = ({size, label, onClick, type, className, ...props}) => {\n    const sizes = {\n        \"small\": \"px-3 py-1.5 text-xs\",\n        \"medium\": \"px-4 py-2 text-sm\",\n        \"large\": \"px-6 py-3 text-base\"\n    }\n    return (\n        <button\n            type={type}\n            onClick={onClick}\n            className={classNames(\"ml-5 bg-white dark:bg-gray-900 border border-gray-300 rounded-md shadow-sm leading-4 font-medium text-red-700 dark:text-red-300 hover:bg-red-300 hover:border-red-400 dark:hover:bg-red-800 focus:outline-none focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:hover:border-red-600\", sizes[size], className || \"\")}\n            {...props}\n        >\n            {label}\n        </button>\n    );\n};\n\nDangerButton.propTypes = {\n    /** Размер кнопки */\n    size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]).isRequired,\n    /** Лейбл (надпись) кнопки */\n    label: PropTypes.string.isRequired,\n    /** Доп. класс */\n    className: PropTypes.string,\n    /** Тип кнопки */\n    type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    /** Обработчик клика */\n    onClick: PropTypes.func,\n};\n\nDangerButton.defaultProps = {\n    size: \"medium\",\n    type: \"button\",\n    className: \"\",\n    label: \"button\",\n    onClick: undefined,\n};\n\nexport default DangerButton;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/** Однотонная цветная кнопка, для привлечения внимания\n * @param size - азмер\n * @param label - лейбл кнопки\n * @param onClick - обработчик клика\n * @param type - тип\n * @param className\n * @param children\n * @param props - доп. пропсы\n * @returns {JSX.Element}\n * @constructor\n */\nconst PrimaryButton = ({size, label, onClick, type, className, children, ...props}) => {\n    const sizes = {\n        \"small\": \"px-3 py-1.5 text-xs\",\n        \"medium\": \"px-4 py-2 text-sm\",\n        \"large\": \"px-6 py-3 text-base\"\n    }\n    return (\n        <button\n            type={type}\n            onClick={onClick}\n            className={classNames(\"bg-indigo-600 border border-transparent rounded-md shadow-sm inline-flex items-center justify-center font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\", sizes[size], className)}\n            {...props}\n        >\n            {children}\n            {label}\n        </button>\n    );\n};\n\nPrimaryButton.propTypes = {\n    /** Размер кнопки */\n    size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]).isRequired,\n    /** Лейбл (надпись) кнопки */\n    label: PropTypes.string.isRequired,\n    /** Доп. класс */\n    className: PropTypes.string,\n    /** Тип кнопки */\n    type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    /** Обработчик клика */\n    onClick: PropTypes.func,\n};\n\nPrimaryButton.defaultProps = {\n    size: \"medium\",\n    type: \"button\",\n    className: \"\",\n    label: \"button\",\n    onClick: undefined,\n};\n\nexport default PrimaryButton;","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\n/** Карточка с футером\n * @param children - содержимое карточки\n * @param className - доп. класс для карточки\n * @returns {JSX.Element}\n * @constructor\n */\nconst CardWithFooter = ({children, className}) => {\n    return (\n        <div className={classNames(\"shadow sm:rounded-md sm:overflow-hidden\", className || \"\")}>\n            {children}\n        </div>\n    );\n};\n\n/** Основная часть карточки */\nCardWithFooter.Body = (props) =>\n    <div className=\"bg-white dark:bg-gray-900 py-6 px-4 space-y-6 sm:p-6\">\n        {props.children}\n    </div>;\n\n/** Футер карточки */\nCardWithFooter.Footer = (props) =>\n    <div className=\"px-4 py-3 bg-gray-50 dark:bg-gray-700 text-right sm:px-6\">\n        {props.children}\n    </div>;\n\n/** Типы свойств */\nCardWithFooter.propTypes = {\n    /** Доп. класс для карточки */\n    className: PropTypes.string\n};\n\n/** Дефолтные свойства */\nCardWithFooter.defaultProps = {\n    className: \"\"\n};\n\nexport default CardWithFooter;\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\n/** Подзаголовок карточки\n * @param title - подзаголовок\n * @param className - доп. класс/ы\n * @returns {JSX.Element}\n * @constructor\n */\nexport const CardSubHeader = ({title, className}) => {\n    return (\n        <p className={classNames(\"mt-1 text-sm text-gray-500\", className || \"\")}>{title}</p>\n    );\n};\n\nCardSubHeader.propTypes = {\n    /** Заголовок */\n    title: PropTypes.string.isRequired,\n    /** Класс/ы */\n    className: PropTypes.string\n};\n\nCardSubHeader.defaultProps = {\n    /** Заголовок */\n    title: \"\",\n    /** Класс/ы */\n    className: PropTypes.string\n};\n\nexport default CardSubHeader;","import React, {useRef, useState} from \"react\";\nimport {Helmet} from \"react-helmet\";\nimport PageHeader from \"../components/PageHeader\";\nimport config from \"../config\";\nimport {RadioGroup} from \"@headlessui/react\";\nimport classNames from \"classnames\";\nimport {AvatarCircularWithPlaceholderInitials} from \"../components/elements/AvatarCircularWithPlaceholderInitials\";\nimport DatePicker, {registerLocale} from \"react-datepicker\";\nimport ru from \"date-fns/locale/ru\";\nimport moment from \"moment\";\n\n/** Импорт компонентов */\nimport BasicButton from \"../components/elements/BasicButton\";\nimport DangerButton from \"../components/elements/DangerButton\";\nimport PrimaryButton from \"../components/elements/PrimaryButton\";\nimport CardWithFooter from \"../components/elements/CardWithFooter\";\nimport CardHeader from \"../components/elements/CardHeader\";\nimport CardSubHeader from \"../components/elements/CardSubHeader\";\n\n/** Для образца*/\nimport {users} from \"../@mock/SampleData\";\n\nregisterLocale(\"ru\", ru);\n\n/** Цвета для аватарок\n * @type {[{name: string, class: string, selectedClass: string},{name: string, class: string, selectedClass: string},{name: string, class: string, selectedClass: string},{name: string, class: string, selectedClass: string},{name: string, class: string, selectedClass: string},null,null,null]}\n */\nconst colors = [\n    {\n        name: \"indigo\",\n        class: \"bg-indigo-500\",\n        selectedClass: \"ring-indigo-500\"\n    },\n    {\n        name: \"red\",\n        class: \"bg-red-500\",\n        selectedClass: \"ring-red-500\"\n    }, {\n        name: \"orange\",\n        class: \"bg-orange-500\",\n        selectedClass: \"ring-orange-500\"\n    }, {\n        name: \"yellow\",\n        class: \"bg-yellow-500\",\n        selectedClass: \"ring-yellow-500\"\n    }, {\n        name: \"green\",\n        class: \"bg-green-500\",\n        selectedClass: \"ring-green-500\"\n    }, {\n        name: \"cyan\",\n        class: \"bg-cyan-500\",\n        selectedClass: \"ring-cyan-500\"\n    }, {\n        name: \"blue\",\n        class: \"bg-blue-500\",\n        selectedClass: \"ring-blue-500\"\n    }, {\n        name: \"pink\",\n        class: \"bg-pink-500\",\n        selectedClass: \"ring-pink-500\"\n    },\n]\n\n/** Пол для радио-группы\n * @type {[{name: string, text: string, class: string, value: string, selectedClass: string, desc: string},{name: string, text: string, class: string, value: string, selectedClass: string, desc: string},{name: string, text: string, class: string, value: string, selectedClass: string, desc: string}]}\n */\nconst genders = [{\n    name: \"NA\",\n    class: \"bg-gray-200\",\n    text: \"text-gray-800\",\n    selectedClass: \"ring-gray-500\",\n    value: \"NA\",\n    desc: \"Не выбрано\"\n}, {\n    name: \"М\",\n    class: \"bg-blue-200\",\n    text: \"text-blue-800\",\n    selectedClass: \"ring-blue-500\",\n    value: \"male\",\n    desc: \"Мужской\"\n}, {\n    name: \"Ж\",\n    class: \"bg-pink-200\",\n    text: \"text-pink-800\",\n    selectedClass: \"ring-pink-500\",\n    value: \"female\",\n    desc: \"Женский\"\n},]\n\n/** Навигация вверху страницы\n * @type {[{current: boolean, name: string, href: string}]}\n */\nconst breadcrumbs = [{name: \"Мой профиль\", href: \"/myprofile\", current: false},\n    {name: \"Редактирование моего профиля\", href: \"/myprofile/edit\", current: true}];\n\nconst MyInfoEdit = () => {\n    /** Стейт пользовательских данных */\n    const [userData, setUserData] = useState(users[0]);\n\n    /** Хандл, изменяющий стейт, по вводу в инпут,\n     * берет имя инпута, в качестве ключа в стейте\n     * @param evt\n     */\n    const handleUserDataChange = evt => {\n        const {name, value} = evt.target;\n        setUserData(prevState => ({\n            ...prevState, [name]: value\n        }));\n    };\n\n    /** Хандл изменения цвета аватара\n     * @param value\n     */\n    const handleColorChange = (value) => {\n        setUserData(prevState => ({\n            // eslint-disable-next-line\n            ...prevState, [\"color\"]: value\n        }));\n    };\n\n    /** Хандл изменения пола\n     * @param value\n     */\n    const handleGenderChange = (value) => {\n        setUserData(prevState => ({\n            // eslint-disable-next-line\n            ...prevState, [\"gender\"]: value\n        }));\n    };\n\n    /** Хандл изменения дня рождения\n     * @param value\n     */\n    const handleBirthDayChange = (value) => {\n        setUserData(prevState => ({\n            // eslint-disable-next-line\n            ...prevState, [\"birthday\"]: value\n        }));\n    };\n\n    /** Хандл удаления аватара */\n    const handleAvatarReset = () => {\n        setUserData(prevState => ({\n            // eslint-disable-next-line\n            ...prevState, [\"avatar\"]: \"\"\n        }));\n    };\n\n    /** Хандл, эмулирующий выбор файла в инпуте аватара */\n    const chooseAvatar = () => {\n        avatarFile.current.click();\n    };\n\n    /** Реф на скрытый инпут выбора аватара\n     * @type {React.MutableRefObject<null>}\n     */\n    const avatarFile = useRef(null);\n\n    return (<React.Fragment>\n        {/** Заголовок страницы */}\n        <Helmet>\n            <title>{config.APP_NAME} - Редактирование моего профиля</title>\n        </Helmet>\n\n        <div className=\"p-4 justify-self-stretch justify-center relative\">\n            <PageHeader pages={breadcrumbs}/>\n            {/* Узкое содержимое */}\n            <div className=\"space-y-6 max-w-7xl mx-auto md:px-8 xl:px-0 lg:p-4 px-0 py-4\">\n                {/* Узкое содержимое */}\n                <form action=\"#\" method=\"POST\">\n                    <CardWithFooter>\n                        <CardWithFooter.Body>\n                            <div>\n                                <CardHeader title=\"Аккаунт\"/>\n                                <CardSubHeader title=\"Данные для входа.\"/>\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"company-website\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Имя пользователя\n                                    </label>\n                                    <p className=\"mt-1 text-sm text-gray-500\">\n                                        Редактирование логина доступно только администратору.\n                                    </p>\n                                    <input\n                                        value={userData.login}\n                                        readOnly\n                                        type=\"text\"\n                                        name=\"login\"\n                                        id=\"login\"\n                                        autoComplete=\"login\"\n                                        className=\"mt-1 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 flex-grow block w-full min-w-0 rounded-md sm:text-sm border-gray-300 text-gray-500 dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label\n                                        className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Аватар</label>\n                                    <p className=\"mt-1 text-sm text-gray-500\">\n                                        Если не загружен, вместо изображения будет цветной аватар с инициалами.\n                                    </p>\n                                    <input type=\"file\" id=\"file\" ref={avatarFile} className=\"hidden\"/>\n                                    <div className=\"mt-1 flex items-center\">\n                    <span className=\"inline-block bg-gray-100 dark:bg-gray-800 rounded-full overflow-hidden h-12 w-12\">\n                        {userData.avatar ? <img src={userData.avatar} alt=\"Аватар\"/> :\n                            <svg className=\"h-full w-full text-gray-300 dark:text-gray-500\" fill=\"currentColor\"\n                                 viewBox=\"0 0 24 24\">\n                                <path\n                                    d=\"M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z\"/>\n                            </svg>}\n\n                    </span>\n                                        <BasicButton label=\"Изменить\" onClick={chooseAvatar} size=\"medium\"/>\n                                        <DangerButton label=\"Удалить\" onClick={handleAvatarReset} size=\"medium\"/>\n                                    </div>\n                                </div>\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label\n                                        className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Цвет\n                                        для аватара</label>\n                                    <p className=\"mt-1 text-sm text-gray-500\">\n                                        Если не загружено изображение для аватара.\n                                    </p>\n                                    <div className=\"flex items-center flex-wrap\">\n                                        <AvatarCircularWithPlaceholderInitials\n                                            color={userData.color.toLowerCase()} size=\"12\" item={userData}\n                                            classname=\"mt-1\"/>\n                                        <RadioGroup value={userData.color} onChange={handleColorChange}\n                                                    className=\"ml-5\" name=\"color\">\n                                            <RadioGroup.Label className=\"sr-only\">Choose a color</RadioGroup.Label>\n                                            <div className=\"flex items-center space-x-3\">\n                                                {colors.map((color) => (<RadioGroup.Option\n                                                    key={color.name}\n                                                    value={color.name}\n                                                    className={({\n                                                                    active,\n                                                                    checked\n                                                                }) => classNames(color.selectedClass, active && checked ? \"ring\" : \"\", !active && checked ? \"ring-2\" : \"\", \"-m-0.5 relative p-0.5 rounded-full flex items-center justify-center cursor-pointer focus:outline-none\")}\n                                                >\n                                                    <RadioGroup.Label as=\"p\" className=\"sr-only\">\n                                                        {color.name}\n                                                    </RadioGroup.Label>\n                                                    <span\n                                                        aria-hidden=\"true\"\n                                                        className={classNames(color.class, \"h-8 w-8 border border-black border-opacity-10 rounded-full\")}\n                                                    />\n                                                </RadioGroup.Option>))}\n                                            </div>\n                                        </RadioGroup>\n                                    </div>\n                                </div>\n                            </div>\n                        </CardWithFooter.Body>\n                        <CardWithFooter.Footer>\n                            <PrimaryButton label=\"Сохранить\" size=\"medium\" type=\"submit\"/>\n                        </CardWithFooter.Footer>\n                    </CardWithFooter>\n                </form>\n\n                <form action=\"#\" method=\"POST\">\n                    <CardWithFooter>\n                        <CardWithFooter.Body>\n                            <CardHeader title=\"Персональная Информация\"/>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"first-name\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Имя, фамилия, отчество (полностью)\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        value={userData.name}\n                                        name=\"name\"\n                                        id=\"name\"\n                                        autoComplete=\"given-name\"\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <div className=\"flex items-center flex-grow justify-between\">\n                                        <div>\n                                            <label htmlFor=\"gender\"\n                                                   className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                                Пол\n                                            </label>\n                                            <div className=\"flex items-center flex-wrap\">\n                                                <RadioGroup value={userData.gender} onChange={handleGenderChange}\n                                                            className=\"mt-1\" name=\"gender\">\n                                                    <RadioGroup.Label className=\"sr-only\">Choose a\n                                                        gender</RadioGroup.Label>\n                                                    <div className=\"flex items-center space-x-3\">\n                                                        {genders.map((gender) => (<RadioGroup.Option\n                                                            key={gender.name}\n                                                            value={gender.value}\n                                                            className={({\n                                                                            active,\n                                                                            checked\n                                                                        }) => classNames(gender.selectedClass, active && checked ? \"ring\" : \"\", !active && checked ? \"ring-2\" : \"\", \"-m-0.5 relative p-0.5 rounded-full flex items-center justify-center cursor-pointer focus:outline-none text-sm\")}\n                                                        >\n                                                            <RadioGroup.Label as=\"p\" className=\"sr-only\">\n                                                                {gender.name}\n                                                            </RadioGroup.Label>\n                                                            <span\n                                                                aria-hidden=\"true\"\n                                                                className={classNames(gender.class, gender.text, \"h-8 w-8 border border-black border-opacity-10 rounded-full flex items-center justify-center\")}\n                                                            >{gender.name}</span>\n                                                        </RadioGroup.Option>))}\n                                                    </div>\n                                                </RadioGroup>\n                                            </div>\n                                        </div>\n                                        <div className=\"ml-5\">\n                                            <label htmlFor=\"last-name\"\n                                                   className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                                День рождения\n                                            </label>\n                                            <DatePicker selected={moment(userData.birthday).toDate()} locale=\"ru\"\n                                                        dateFormat=\"dd.MM.yyyy\"\n                                                        onChange={(date) => handleBirthDayChange(date)}\n                                                        className=\"mt-1\"/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </CardWithFooter.Body>\n                        <CardWithFooter.Footer>\n                            <PrimaryButton label=\"Сохранить\" size=\"medium\" type=\"submit\"/>\n                        </CardWithFooter.Footer>\n                    </CardWithFooter>\n                </form>\n\n                <form action=\"#\" method=\"POST\">\n                    <CardWithFooter>\n                        <CardWithFooter.Body>\n                            <div>\n                                <CardHeader title=\"Контактная Информация\"/>\n                                <CardSubHeader\n                                    title=\"Пожалуйста, не делитесь личными данными сотрудников без их согласия.\"/>\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"mobile_phone\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Мобильный телефон\n                                    </label>\n                                    <input\n                                        type=\"tel\"\n                                        name=\"mobile_phone\"\n                                        id=\"mobile_phone\"\n                                        autoComplete=\"mobile_phone\"\n                                        pattern=\"[7]{1}-[0-9]{3}-[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n                                        value={userData.mobile_phone}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"email-address\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Адрес электронной почты\n                                    </label>\n                                    <input\n                                        type=\"email\"\n                                        name=\"email-address\"\n                                        id=\"email-address\"\n                                        autoComplete=\"email\"\n                                        value={userData.email}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6\">\n                                    <label htmlFor=\"address\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Домашний адрес (город, улица, дом, квартира)\n                                    </label>\n                                    <input\n                                        type=\"text\"\n                                        name=\"address\"\n                                        id=\"address\"\n                                        autoComplete=\"address\"\n                                        value={userData.address}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                            </div>\n                        </CardWithFooter.Body>\n                        <CardWithFooter.Footer>\n                            <PrimaryButton label=\"Сохранить\" size=\"medium\" type=\"submit\"/>\n                        </CardWithFooter.Footer>\n                    </CardWithFooter>\n                </form>\n\n                <form action=\"#\" method=\"POST\">\n                    <CardWithFooter>\n                        <CardWithFooter.Body>\n                            <div>\n                                <CardHeader title=\"Социальные Сети\"/>\n                                <CardSubHeader\n                                    title=\"Не показываются на других страницах. Для хранения ссылок на Ваши страницы в интернете.\"/>\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"vkontakte\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Вконтакте\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"vkontakte\"\n                                        id=\"vkontakte\"\n                                        autoComplete=\"vkontakte\"\n                                        value={userData.vkontakte}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"odnoklassniki\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Одноклассники\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"odnoklassniki\"\n                                        id=\"odnoklassniki\"\n                                        autoComplete=\"odnoklassniki\"\n                                        value={userData.odnoklassniki}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"facebook\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Facebook\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"facebook\"\n                                        id=\"facebook\"\n                                        autoComplete=\"facebook\"\n                                        value={userData.facebook}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"instagram\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Instagram\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"instagram\"\n                                        id=\"instagram\"\n                                        autoComplete=\"instagram\"\n                                        value={userData.instagram}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n\n                            </div>\n                            <div className=\"grid grid-cols-6 gap-6\">\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"site1\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Сайт 1\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"site1\"\n                                        id=\"site1\"\n                                        autoComplete=\"site1\"\n                                        value={userData.site1}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n\n                                <div className=\"col-span-6 sm:col-span-3\">\n                                    <label htmlFor=\"site2\"\n                                           className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                        Сайт 2\n                                    </label>\n                                    <input\n                                        type=\"url\"\n                                        name=\"site2\"\n                                        id=\"site2\"\n                                        autoComplete=\"site2\"\n                                        value={userData.site2}\n                                        onChange={handleUserDataChange}\n                                        className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm dark:bg-gray-900 dark:border-gray-600\"\n                                    />\n                                </div>\n                            </div>\n                        </CardWithFooter.Body>\n                        <CardWithFooter.Footer>\n                            <PrimaryButton label=\"Сохранить\" size=\"medium\" type=\"submit\"/>\n                        </CardWithFooter.Footer>\n                    </CardWithFooter>\n                </form>\n            </div>\n        </div>\n    </React.Fragment>);\n};\n\nexport default MyInfoEdit;"],"names":["pages","classname","header","children","className","to","classNames","title","map","page","href","current","undefined","name","BasicButton","size","label","onClick","type","props","defaultProps","CardHeader","PropTypes","DangerButton","PrimaryButton","CardWithFooter","Body","Footer","CardSubHeader","registerLocale","ru","colors","class","selectedClass","genders","text","value","desc","breadcrumbs","useState","users","userData","setUserData","handleUserDataChange","evt","target","prevState","avatarFile","useRef","Helmet","config","PageHeader","action","method","htmlFor","login","readOnly","id","autoComplete","ref","avatar","src","alt","fill","viewBox","d","click","AvatarCircularWithPlaceholderInitials","color","toLowerCase","item","onChange","active","checked","as","gender","selected","moment","birthday","toDate","locale","dateFormat","date","pattern","mobile_phone","email","address","vkontakte","odnoklassniki","facebook","instagram","site1","site2"],"sourceRoot":""}